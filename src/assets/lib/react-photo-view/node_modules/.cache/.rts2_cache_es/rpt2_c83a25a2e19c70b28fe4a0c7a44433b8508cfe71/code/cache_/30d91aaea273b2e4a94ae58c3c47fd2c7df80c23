{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Curtains, Plane } from \"curtainsjs\";\r\nimport { gsap } from \"gsap\";\r\n// Стили для компонента\r\nconst styles = {\r\n    container: {\r\n        position: \"fixed\",\r\n        width: \"100vw\",\r\n        top: 0,\r\n        left: 0,\r\n        height: \"100vh\",\r\n        zIndex: 1000,\r\n    },\r\n    canvas: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n    },\r\n    plane: {\r\n        Position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n    },\r\n    buttonContainer: {\r\n        Position: \"absolute\",\r\n        bottom: \"20px\",\r\n        left: \"50%\",\r\n        transform: \"translateX(-50%)\",\r\n        display: \"flex\",\r\n        gap: \"10px\",\r\n    },\r\n    button: {\r\n        padding: \"10px 20px\",\r\n        fontSize: \"16px\",\r\n        cursor: \"pointer\",\r\n    },\r\n};\r\n// Вершинный шейдер (как в вашем коде)\r\nconst vertexShader = `\n  #ifdef GL_ES\n  precision mediump float;\n  #endif\n  \n  attribute vec3 aVertexPosition;\n  attribute vec2 aTextureCoord;\n\n  uniform mat4 uMVMatrix;\n  uniform mat4 uPMatrix;\n\n  uniform mat4 texture0Matrix;\n  uniform mat4 texture1Matrix;\n  uniform mat4 mapMatrix;\n\n  varying vec3 vVertexPosition;\n  varying vec2 vTextureCoord0;\n  varying vec2 vTextureCoord1;\n  varying vec2 vTextureCoordMap;\n\n  void main() {\n    vec3 vertexPosition = aVertexPosition;\n    gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);\n    vTextureCoord0 = (texture0Matrix * vec4(aTextureCoord, 0., 1.)).xy;\n    vTextureCoord1 = (texture1Matrix * vec4(aTextureCoord, 0., 1.)).xy;\n    vTextureCoordMap = (mapMatrix * vec4(aTextureCoord, 0., 1.)).xy;\n    vVertexPosition = vertexPosition;\n  }\n`;\r\n// Фрагментный шейдер (как в вашем коде)\r\nconst fragmentShader = `\n  #ifdef GL_ES\n  precision mediump float;\n  #endif\n\n  #define PI2 6.28318530718\n  #define PI 3.14159265359\n  #define S(a,b,n) smoothstep(a,b,n)\n\n  uniform float uTime;\n  uniform float uProgress;\n  uniform vec2 uReso;\n  \n  varying vec3 vVertexPosition;\n  varying vec2 vTextureCoord0;\n  varying vec2 vTextureCoord1;\n  varying vec2 vTextureCoordMap;\n\n  uniform sampler2D texture0;\n  uniform sampler2D texture1;\n  uniform sampler2D map;\n\n  float exponentialEasing(float x, float a) {\n    float epsilon = 0.00001;\n    float min_param_a = 0.0 + epsilon;\n    float max_param_a = 1.0 - epsilon;\n    a = max(min_param_a, min(max_param_a, a));\n\n    if (a < 0.5) {\n      a = 2.0 * a;\n      float y = pow(x, a);\n      return y;\n    } else {\n      a = 2.0 * (a - 0.5);\n      float y = pow(x, 1.0 / (1. - a));\n      return y;\n    }\n  }\n\n  vec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n    vec4 color = vec4(0.0);\n    vec2 off1 = vec2(1.411764705882353) * direction;\n    vec2 off2 = vec2(3.2941176470588234) * direction;\n    vec2 off3 = vec2(5.176470588235294) * direction;\n    color += texture2D(image, uv) * 0.1964825501511404;\n    color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n    color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n    color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n    color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n    color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n    color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n    return color;\n  }\n\n  void main() {\n    vec2 uv0 = vTextureCoord0;\n    vec2 uv1 = vTextureCoord1;\n\n    float progress0 = uProgress;\n    float progress1 = 1. - uProgress;\n\n    vec4 map = blur13(map, vTextureCoordMap, uReso, vec2(2.)) + 0.5;\n\n    uv0.x += progress0 * map.r;\n    uv1.x -= progress1 * map.r;\n\n    vec4 color = texture2D(texture0, uv0);\n    vec4 color1 = texture2D(texture1, uv1);\n\n    gl_FragColor = mix(color, color1, progress0);\n  }\n`;\r\nconst WebGLComponent = ({ items }) => {\r\n    const canvasRef = useRef(null);\r\n    const planeRef = useRef(null);\r\n    const curtainsRef = useRef(null);\r\n    const planeInstanceRef = useRef(null);\r\n    const currentIndexRef = useRef(0);\r\n    const images = items.map(item => item.src);\r\n    const mapTexture = \"path/to/map.jpg\"; // Карта смещения\r\n    useEffect(() => {\r\n        // Инициализация Curtains.js\r\n        curtainsRef.current = new Curtains({\r\n            container: canvasRef.current,\r\n            pixelRatio: Math.min(1.5, window.devicePixelRatio),\r\n        });\r\n        // Параметры плоскости\r\n        const params = {\r\n            vertexShader,\r\n            fragmentShader,\r\n            widthSegments: 40,\r\n            heightSegments: 40,\r\n            uniforms: {\r\n                time: {\r\n                    name: \"uTime\",\r\n                    type: \"1f\",\r\n                    value: 0,\r\n                },\r\n                progress: {\r\n                    name: \"uProgress\",\r\n                    type: \"1f\",\r\n                    value: 0,\r\n                },\r\n                reso: {\r\n                    name: \"uReso\",\r\n                    type: \"2f\",\r\n                    value: [window.innerWidth, window.innerHeight],\r\n                },\r\n            },\r\n        };\r\n        // Создание плоскости\r\n        planeInstanceRef.current = new Plane(curtainsRef.current, planeRef.current, params);\r\n        // Загрузка текстур\r\n        planeInstanceRef.current.onReady(() => {\r\n            // Загружаем начальные текстуры\r\n            planeInstanceRef.current\r\n                .createTexture({ sampler: \"texture0\" })\r\n                .loadImage(images[0]);\r\n            planeInstanceRef.current\r\n                .createTexture({ sampler: \"texture1\" })\r\n                .loadImage(images[1]);\r\n            planeInstanceRef.current\r\n                .createTexture({ sampler: \"map\" })\r\n                .loadImage(mapTexture);\r\n            // Обновление анимации\r\n            planeInstanceRef.current.onRender(() => {\r\n                planeInstanceRef.current.uniforms.time.value += 0.01;\r\n                planeInstanceRef.current.uniforms.reso.value = [\r\n                    window.innerWidth,\r\n                    window.innerHeight,\r\n                ];\r\n            });\r\n        });\r\n        // Очистка при размонтировании\r\n        return () => {\r\n            if (planeInstanceRef.current) {\r\n                planeInstanceRef.current.remove();\r\n            }\r\n            if (curtainsRef.current) {\r\n                curtainsRef.current.dispose();\r\n            }\r\n        };\r\n    }, []);\r\n    // Функция для переключения на следующее изображение\r\n    const next = () => {\r\n        const nextIndex = (currentIndexRef.current + 1) % images.length;\r\n        currentIndexRef.current = nextIndex;\r\n        // Обновляем текстуры\r\n        const prevTexture = planeInstanceRef.current.textures.find((t) => t.sampler === \"texture0\");\r\n        const nextTexture = planeInstanceRef.current.textures.find((t) => t.sampler === \"texture1\");\r\n        // Анимация перехода\r\n        gsap.to(planeInstanceRef.current.uniforms.progress, {\r\n            duration: 1,\r\n            value: 1,\r\n            onComplete: () => {\r\n                // После завершения анимации меняем текстуру0 на следующую\r\n                prevTexture.loadImage(images[nextIndex]);\r\n                nextTexture.loadImage(images[(nextIndex + 1) % images.length]);\r\n                planeInstanceRef.current.uniforms.progress.value = 0;\r\n            },\r\n        });\r\n    };\r\n    // Функция для переключения на предыдущее изображение\r\n    const prev = () => {\r\n        const prevIndex = (currentIndexRef.current - 1 + images.length) % images.length;\r\n        currentIndexRef.current = prevIndex;\r\n        // Обновляем текстуры\r\n        const prevTexture = planeInstanceRef.current.textures.find((t) => t.sampler === \"texture0\");\r\n        const nextTexture = planeInstanceRef.current.textures.find((t) => t.sampler === \"texture1\");\r\n        // Анимация перехода\r\n        gsap.to(planeInstanceRef.current.uniforms.progress, {\r\n            duration: 1,\r\n            value: 1,\r\n            onComplete: () => {\r\n                // После завершения анимации меняем текстуру0 на предыдущую\r\n                prevTexture.loadImage(images[prevIndex]);\r\n                nextTexture.loadImage(images[(prevIndex + 1) % images.length]);\r\n                planeInstanceRef.current.uniforms.progress.value = 0;\r\n            },\r\n        });\r\n    };\r\n    return (_jsxs(\"div\", { style: styles.container, children: [_jsx(\"div\", { ref: canvasRef, style: styles.canvas }), _jsx(\"div\", { ref: planeRef, style: styles.plane }), _jsxs(\"div\", { style: styles.buttonContainer, children: [_jsx(\"button\", { style: styles.button, onClick: prev, children: \"Previous\" }), _jsx(\"button\", { style: styles.button, onClick: next, children: \"Next\" })] })] }));\r\n};\r\nexport default WebGLComponent;\r\n//# sourceMappingURL=WebGLComponent.js.map","references":["/home/georgii/Документы/nvsert/nvsert/src/assets/lib/react-photo-view/node_modules/@types/react/ts5.0/index.d.ts","/home/georgii/Документы/nvsert/nvsert/src/assets/lib/react-photo-view/node_modules/@types/curtainsjs/index.d.ts","/home/georgii/Документы/nvsert/nvsert/src/assets/lib/react-photo-view/node_modules/gsap/types/index.d.ts"],"map":"{\"version\":3,\"file\":\"WebGLComponent.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/components/WebGLComponent.tsx\"],\"names\":[],\"mappings\":\";AAAA,OAAc,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AACjD,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAC7C,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAE5B,uBAAuB;AACvB,MAAM,MAAM,GAAG;IACb,SAAS,EAAE;QACT,QAAQ,EAAE,OAAO;QACjB,KAAK,EAAE,OAAO;QACd,GAAG,EAAE,CAAC;QACN,IAAI,EAAE,CAAC;QACP,MAAM,EAAE,OAAO;QACf,MAAM,EAAE,IAAI;KACb;IACD,MAAM,EAAE;QACN,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,MAAM;KACf;IACD,KAAK,EAAE;QACL,QAAQ,EAAE,UAAU;QACpB,GAAG,EAAE,CAAC;QACN,IAAI,EAAE,CAAC;QACP,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,MAAM;KACf;IACD,eAAe,EAAE;QACf,QAAQ,EAAE,UAAU;QACpB,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,KAAK;QACX,SAAS,EAAE,kBAAkB;QAC7B,OAAO,EAAE,MAAM;QACf,GAAG,EAAE,MAAM;KACZ;IACD,MAAM,EAAE;QACN,OAAO,EAAE,WAAW;QACpB,QAAQ,EAAE,MAAM;QAChB,MAAM,EAAE,SAAS;KAClB;CACF,CAAC;AAEF,sCAAsC;AACtC,MAAM,YAAY,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BpB,CAAC;AAEF,wCAAwC;AACxC,MAAM,cAAc,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuEtB,CAAC;AAEF,MAAM,cAAc,GAAG,CAAC,EAAC,KAAK,EAAa,EAAE,EAAE;IAC7C,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC/B,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC9B,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IACjC,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IACtC,MAAM,eAAe,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAClC,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3C,MAAM,UAAU,GAAG,iBAAiB,CAAC,CAAC,iBAAiB;IAEvD,SAAS,CAAC,GAAG,EAAE;QACb,4BAA4B;QAC5B,WAAW,CAAC,OAAO,GAAG,IAAI,QAAQ,CAAC;YACjC,SAAS,EAAE,SAAS,CAAC,OAAO;YAC5B,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,gBAAgB,CAAC;SACnD,CAAC,CAAC;QAEH,sBAAsB;QACtB,MAAM,MAAM,GAAQ;YAClB,YAAY;YACZ,cAAc;YACd,aAAa,EAAE,EAAE;YACjB,cAAc,EAAE,EAAE;YAClB,QAAQ,EAAE;gBACR,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,CAAC;iBACT;gBACD,QAAQ,EAAE;oBACR,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,CAAC;iBACT;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC;iBAC/C;aACF;SACF,CAAC;QAEF,qBAAqB;QACrB,gBAAgB,CAAC,OAAO,GAAG,IAAI,KAAK,CAClC,WAAW,CAAC,OAAO,EACnB,QAAQ,CAAC,OAAO,EAChB,MAAM,CACP,CAAC;QAEF,mBAAmB;QACnB,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE;YACpC,+BAA+B;YAC/B,gBAAgB,CAAC,OAAO;iBACrB,aAAa,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;iBACtC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACxB,gBAAgB,CAAC,OAAO;iBACrB,aAAa,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;iBACtC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACxB,gBAAgB,CAAC,OAAO;iBACrB,aAAa,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;iBACjC,SAAS,CAAC,UAAU,CAAC,CAAC;YAEzB,sBAAsB;YACtB,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE;gBACrC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;gBACrD,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG;oBAC7C,MAAM,CAAC,UAAU;oBACjB,MAAM,CAAC,WAAW;iBACnB,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,8BAA8B;QAC9B,OAAO,GAAG,EAAE;YACV,IAAI,gBAAgB,CAAC,OAAO,EAAE;gBAC5B,gBAAgB,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;aACnC;YACD,IAAI,WAAW,CAAC,OAAO,EAAE;gBACvB,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;aAC/B;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,oDAAoD;IACpD,MAAM,IAAI,GAAG,GAAG,EAAE;QAChB,MAAM,SAAS,GAAG,CAAC,eAAe,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;QAChE,eAAe,CAAC,OAAO,GAAG,SAAS,CAAC;QAEpC,qBAAqB;QACrB,MAAM,WAAW,GAAG,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CACxD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,UAAU,CAChC,CAAC;QACF,MAAM,WAAW,GAAG,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CACxD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,UAAU,CAChC,CAAC;QAEF,oBAAoB;QACpB,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAClD,QAAQ,EAAE,CAAC;YACX,KAAK,EAAE,CAAC;YACR,UAAU,EAAE,GAAG,EAAE;gBACf,0DAA0D;gBAC1D,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;gBACzC,WAAW,CAAC,SAAS,CACnB,MAAM,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CACxC,CAAC;gBACF,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;YACvD,CAAC;SACF,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,qDAAqD;IACrD,MAAM,IAAI,GAAG,GAAG,EAAE;QAChB,MAAM,SAAS,GACb,CAAC,eAAe,CAAC,OAAO,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;QAChE,eAAe,CAAC,OAAO,GAAG,SAAS,CAAC;QAEpC,qBAAqB;QACrB,MAAM,WAAW,GAAG,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CACxD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,UAAU,CAChC,CAAC;QACF,MAAM,WAAW,GAAG,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CACxD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,UAAU,CAChC,CAAC;QAEF,oBAAoB;QACpB,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAClD,QAAQ,EAAE,CAAC;YACX,KAAK,EAAE,CAAC;YACR,UAAU,EAAE,GAAG,EAAE;gBACf,2DAA2D;gBAC3D,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;gBACzC,WAAW,CAAC,SAAS,CACnB,MAAM,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CACxC,CAAC;gBACF,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;YACvD,CAAC;SACF,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,CACL,eAAK,KAAK,EAAE,MAAM,CAAC,SAAS,aAC1B,cAAK,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,GAAI,EAC7C,cAAK,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,GAAI,EAC3C,eAAK,KAAK,EAAE,MAAM,CAAC,eAAe,aAChC,iBAAQ,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,yBAElC,EACT,iBAAQ,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,qBAElC,IACL,IACF,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,cAAc,CAAC\"}","dts":{"name":"/home/georgii/Документы/nvsert/nvsert/src/assets/lib/react-photo-view/dist/components/WebGLComponent.d.ts","writeByteOrderMark":false,"text":"declare const WebGLComponent: ({ items }: {\r\n    items: any;\r\n}) => import(\"react/jsx-runtime\").JSX.Element;\r\nexport default WebGLComponent;\r\n"}}
